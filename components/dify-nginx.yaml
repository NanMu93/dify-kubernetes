apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-nginx-config-template
  namespace: dify
data:
  nginx.conf.template: |-
    user  nginx;
    worker_processes  ${NGINX_WORKER_PROCESSES};

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  ${NGINX_KEEPALIVE_TIMEOUT};

        #gzip  on;
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};

        include /etc/nginx/conf.d/*.conf;
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-nginx-https-config-template
  namespace: dify
data:
  https.conf.template: |
    listen ${NGINX_SSL_PORT} ssl;
    ssl_certificate ${SSL_CERTIFICATE_PATH};
    ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};
    ssl_protocols ${NGINX_SSL_PROTOCOLS};
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-nginx-proxy-config-template
  namespace: dify
data:
  proxy.conf.template: |
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout ${NGINX_PROXY_READ_TIMEOUT};
    proxy_send_timeout ${NGINX_PROXY_SEND_TIMEOUT};

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-nginx-default-config-template
  namespace: dify
data:
  default.conf.template: |
    server {
        listen ${NGINX_PORT};
        server_name ${NGINX_SERVER_NAME};

        # Rule 1: Handle application entry points (preserve /app/{id})
        location ~ ^/app/[a-f0-9-]+$ {
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        # Rule 2: Handle static resource requests (remove /app/{id} prefix)
        location ~ ^/app/[a-f0-9-]+/(console/api/.*)$ {
          rewrite ^/app/[a-f0-9-]+/(.*)$ /$1 break;
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        location /console/api {
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        location /api {
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        location /v1 {
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        location /files {
          proxy_pass http://dify-api.dify.svc.cluster.local:5001;
          include proxy.conf;
        }

        location /explore {
          proxy_pass http://dify-web.dify.svc.cluster.local:3000;
          include proxy.conf;
        }

        location /e/ {
          proxy_pass http://dify-plugin-daemon.dify.svc.cluster.local:5002;
          proxy_set_header Dify-Hook-Url $scheme://$host$request_uri;
          include proxy.conf;
        }

        location / {
          proxy_pass http://dify-web.dify.svc.cluster.local:3000;
          include proxy.conf;
        }

        # placeholder for acme challenge location
        ${ACME_CHALLENGE_LOCATION}

        # placeholder for https config defined in https.conf.template
        ${HTTPS_CONFIG}
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-nginx-entrypoint
  namespace: dify
data:
  dify-nginx-entrypoint.sh: |
    #!/bin/bash
    if [ "${NGINX_HTTPS_ENABLED}" = "true" ]; then
        # Check if the certificate and key files for the specified domain exist
        if [ -n "${CERTBOT_DOMAIN}" ] && \
          [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}" ] && \
          [ -f "/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}" ]; then
            SSL_CERTIFICATE_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/letsencrypt/live/${CERTBOT_DOMAIN}/${NGINX_SSL_CERT_KEY_FILENAME}"
        else
            SSL_CERTIFICATE_PATH="/etc/ssl/${NGINX_SSL_CERT_FILENAME}"
            SSL_CERTIFICATE_KEY_PATH="/etc/ssl/${NGINX_SSL_CERT_KEY_FILENAME}"
        fi
        export SSL_CERTIFICATE_PATH
        export SSL_CERTIFICATE_KEY_PATH

        # set the HTTPS_CONFIG environment variable to the content of the https.conf.template
        HTTPS_CONFIG=$(envsubst < /etc/nginx/https.conf.template)
        export HTTPS_CONFIG
        # Substitute the HTTPS_CONFIG in the default.conf.template with content from https.conf.template
        envsubst '${HTTPS_CONFIG}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
    fi

    if [ "${NGINX_ENABLE_CERTBOT_CHALLENGE}" = "true" ]; then
        ACME_CHALLENGE_LOCATION='location /.well-known/acme-challenge/ { root /var/www/html; }'
    else
        ACME_CHALLENGE_LOCATION=''
    fi
    export ACME_CHALLENGE_LOCATION

    env_vars=$(printenv | cut -d= -f1 | sed 's/^/$/g' | paste -sd, -)

    envsubst "$env_vars" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf
    envsubst "$env_vars" < /etc/nginx/proxy.conf.template > /etc/nginx/proxy.conf

    envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf

    # Start Nginx using the default entrypoint
    exec nginx -g 'daemon off;'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dify-nginx
  namespace: dify
  labels:
    app: dify-nginx
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: dify-nginx
  template:
    metadata:
      labels:
        app: dify-nginx
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      automountServiceAccountToken: false
      containers:
      - name: dify-nginx
        image: nginx:stable
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 1Gi
        envFrom:
        - configMapRef:
            name: dify-env
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: dify-nginx-config-template
          mountPath: /etc/nginx/nginx.conf.template
          subPath: nginx.conf.template
        - name: dify-nginx-default-config-template
          mountPath: /etc/nginx/conf.d/default.conf.template
          subPath: default.conf.template
        - name: dify-nginx-https-config-template
          mountPath: /etc/nginx/https.conf.template
          subPath: https.conf.template
        - name: dify-nginx-proxy-config-template
          mountPath: /etc/nginx/proxy.conf.template
          subPath: proxy.conf.template
        - name: dify-nginx-entrypoint
          mountPath: /tmp/dify-nginx-entrypoint.sh
          subPath: dify-nginx-entrypoint.sh
        command: [ 'sh', '-c', "cp /tmp/dify-nginx-entrypoint.sh /dify-nginx-entrypoint.sh && sed -i 's/\r$$//' /dify-nginx-entrypoint.sh && chmod +x /dify-nginx-entrypoint.sh && /dify-nginx-entrypoint.sh" ]
        imagePullPolicy: IfNotPresent
      volumes:
      - name: dify-nginx-config-template
        configMap:
          name: dify-nginx-config-template
      - name: dify-nginx-https-config-template
        configMap:
          name: dify-nginx-https-config-template
      - name: dify-nginx-proxy-config-template
        configMap:
          name: dify-nginx-proxy-config-template
      - name: dify-nginx-default-config-template
        configMap:
          name: dify-nginx-default-config-template
      - name: dify-nginx-entrypoint
        configMap:
          name: dify-nginx-entrypoint
        
---
kind: Service
apiVersion: v1
metadata:
  name: dify-nginx
  namespace: dify
spec:
  selector:
    app: dify-nginx
  type: ClusterIP
  ports:
  - name: dify-nginx
    port: 80
    targetPort: 80
  - name: dify-nginx-ssl
    port: 443
    targetPort: 443

---
kind: Service
apiVersion: v1
metadata:
  name: dify-nginx-access
  namespace: dify
spec:
  selector:
    app: dify-nginx
  # type: LoadBalancer
  ports:
  - name: dify-nginx
    port: 80
    targetPort: 80

# 这是web入口的Service
# 如果你的kubernetes集群使用了内部负载均衡,那么可以配置LoadBalancer
# This is the Service of web entrypoint
# Use LoadBalancer of comment if your Kubernetes cluster using an internal load balancer